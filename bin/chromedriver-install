#!/usr/bin/env ruby
# chromedriver-install

# 20231013
# 0.4.0

# Changes since 0.3:
# -/0 Handle the new JSON API.
# 1. + hardware_platform()
# 2. + json_api_url()
# 3. + json_api_data()
# 4. + json_api_downloadable_version_strings()
# 5. + json_api_download_url()
# 6. + hardware_platform()
# 7. /downloadable_version_strings()/download_page_downloadable_version_strings()/
# 8. /download_url()/download_page_download_url()/
# 9. ~ downloadable_version_strings()
# 10. ~ download_url()
# 11. ~ download_file_path()
# 12. ~ unzip_chromedriver()

gem 'http.rb'

lib_dir = File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)

require 'fileutils'
require 'http'
require 'json'
require 'nokogiri'
require 'open-uri'
require 'zip'
require 'String/matches'
require 'Version'

def hardware_platform
  @hardware_platform ||= RUBY_PLATFORM.split('-').first
end

def home_directory
  File.expand_path('~')
end

def root_application_version
  file_path = "'/Applications/Google Chrome.app/Contents/Info'"
  command = "defaults read #{file_path} CFBundleShortVersionString"
  `#{command}`.strip
end

def user_applications_version
  file_path = "'#{home_directory}/Applications/Google Chrome.app/Contents/Info'"
  command = "defaults read #{file_path} CFBundleShortVersionString"
  `#{command}`.strip
end

def root_application?
  File.exist?('/Applications/Google Chrome.app')
end

def user_application?
  File.exist?("#{home_directory}/Applications/Google Chrome.app")
end

def current_version_string
  if user_application?
    user_applications_version
  elsif root_application?
    root_application_version
  else
    puts "Google Chrome is installed neither in /Applications nor in ~/Applications."
  end
end

def current_version
  @current_version ||= Version.new(current_version_string)
end

def downloads_page_url
  'https://chromedriver.chromium.org/downloads'
end

def json_api_url
  'https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json'
end

def all_links
  downloads_page = HTTP.get(downloads_page_url).body
  document = Nokogiri::HTML.parse(downloads_page)
  nodeset = document.xpath('//a')
  nodeset.map{|element| element["href"]}.compact
end

def download_page_links
  all_links.select do |link|
    link.match?(/path=\d+\.\d+\.\d+\.\d+/)
  end
end

def json_api_data
  @json_api_data ||= (
    raw_json_api_data = HTTP.get(json_api_url).body
    JSON.parse(raw_json_api_data)
  )
end

def download_page_downloadable_version_strings
  download_page_links.map do |download_page_link|
    download_page_link.matches(/(\d+\.\d+\.\d+\.\d+)/)
  end.flatten.uniq
end

def json_api_downloadable_version_strings
  json_api_data['versions'].map do |json_api_datum|
    json_api_datum['version']
  end
end

def downloadable_version_strings
  download_page_downloadable_version_strings + json_api_downloadable_version_strings
end

def downloadable_versions
  downloadable_version_strings.map do |downloadable_version_string|
    Version.new(downloadable_version_string)
  end
end

def required_version
  @required_version ||= (
    matching_versions = downloadable_versions.select do |downloadable_version|
      [current_version.major, current_version.minor, current_version.tiny] === [downloadable_version.major, downloadable_version.minor, downloadable_version.tiny]
    end
    Version.latest(matching_versions.flatten)
  )
end

def download_page_download_url
  base_download_url = "https://chromedriver.storage.googleapis.com/#{required_version}"
  variant_download_url = (
    if hardware_platform == 'arm64' && required_version <= Version.new('106.0.5249.21')
      "/chromedriver_mac64_m1.zip"
    elsif hardware_platform == 'arm64'
      "/chromedriver_mac_arm64.zip"
    else
      "/chromedriver_mac64.zip"
    end
  )
  base_download_url + variant_download_url
end

def json_api_download_url
  json_api_datum = (
    json_api_data['versions'].find do |json_api_datum|
      json_api_datum['version'] == required_version.to_s
    end
  )
  platform_data = json_api_datum['downloads']['chromedriver'].find do |chrome|
    chrome['platform'] == "mac-#{hardware_platform}"
  end
  platform_data['url']
end

def download_url
  @download_url ||= (
    if required_version >= Version.new('116')
      json_api_download_url
    else
      download_page_download_url
    end
  )
end

def download_directory
  File.join(home_directory, 'Downloads')
end

def download_file_path
  @download_file_path ||= (
    if hardware_platform == 'arm64' && required_version >= Version.new('116')
      File.join(download_directory, 'chromedriver-mac-arm64.zip')
    elsif hardware_platform == 'x64' && required_version >= Version.new('116')
      File.join(download_directory, 'chromedriver-mac-x64.zip')
    elsif hardware_platform == 'arm64' && required_version <= Version.new('106.0.5249.21')
      File.join(download_directory, 'chromedriver_ma64_m1.zip')
    elsif hardware_platform == 'arm64'
      File.join(download_directory, 'chromedriver_mac_arm64.zip')
    else
      File.join(download_directory, 'chromedriver_mac64.zip')
    end
  )
end

def remove_zip_file
  FileUtils.rm(download_file_path)
end

def download_chromedriver
  remove_zip_file if File.exist?(download_file_path)
  File.open(download_file_path, 'wb') do |file|
    file << URI.open(download_url).read
  end
end

def unzipped_chromedriver_path
  File.join(download_directory, 'chromedriver')
end

def remove_unzipped_chromedriver_file
  FileUtils.rm(unzipped_chromedriver_path)
end

def unzip_chromedriver
  remove_unzipped_chromedriver_file if File.exist?(unzipped_chromedriver_path)
  Zip::File.open(download_file_path) do |zip_file|
    zip_file.each do |zip_entry|
      if zip_entry.name == 'chromedriver' || zip_entry.name == "chromedriver-mac-arm64/chromedriver"
        zip_file.extract(zip_entry, unzipped_chromedriver_path)
      end
    end
  end
end

def installed_chromedriver_path
  File.join(home_directory, 'bin' , 'chromedriver')
end

def remove_old_chromedriver
  FileUtils.rm(installed_chromedriver_path)
end

def move_chromedriver_to_bin_dir
  FileUtils.mv(unzipped_chromedriver_path, installed_chromedriver_path)
end

def make_chromedriver_executable
  FileUtils.chmod('+x', installed_chromedriver_path)
end

def main
  puts "Downloading chromedriver version #{required_version.version_string}..."
  download_chromedriver
  unzip_chromedriver
  remove_old_chromedriver if File.exist?(installed_chromedriver_path)
  move_chromedriver_to_bin_dir
  make_chromedriver_executable
  remove_zip_file if File.exist?(download_file_path)
  puts "Finished!"
end

main
