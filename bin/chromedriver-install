#!/usr/bin/env ruby
# chromedriver-install

# 20230128
# 0.3.0

# Changes since 0.2:
# 0: Add support for Apple ARM binaries.
# 1. ~ download_url()
# 2. ~ download_file_path()
# 3. ~ remove_zip_file()
# 4. ~ main: Fix output typo.

gem 'http.rb'

lib_dir = File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)

require 'fileutils'
require 'http'
require 'nokogiri'
require 'open-uri'
require 'zip'
require 'String/matches'
require 'Version'

def home_directory
  File.expand_path('~')
end

def root_application_version
  file_path = "'/Applications/Google Chrome.app/Contents/Info'"
  command = "defaults read #{file_path} CFBundleShortVersionString"
  `#{command}`.strip
end

def user_applications_version
  file_path = "'#{home_directory}/Applications/Google Chrome.app/Contents/Info'"
  command = "defaults read #{file_path} CFBundleShortVersionString"
  `#{command}`.strip
end

def root_application?
  File.exist?('/Applications/Google Chrome.app')
end

def user_application?
  File.exist?("#{home_directory}/Applications/Google Chrome.app")
end

def current_version_string
  if user_application?
    user_applications_version
  elsif root_application?
    root_application_version
  else
    puts "Google Chrome is installed neither in /Applications nor in ~/Applications."
  end
end

def current_version
  @current_version ||= Version.new(current_version_string)
end

def downloads_page_url
  'https://chromedriver.chromium.org/downloads'
end

def all_links
  downloads_page = HTTP.get(downloads_page_url).body
  document = Nokogiri::HTML.parse(downloads_page)
  nodeset = document.xpath('//a')
  nodeset.map{|element| element["href"]}.compact
end

def download_page_links
  all_links.select do |link|
    link.match?(/path=\d+\.\d+\.\d+\.\d+/)
  end
end

def downloadable_version_strings
  download_page_links.map do |download_page_link|
    download_page_link.matches(/(\d+\.\d+\.\d+\.\d+)/)
  end.flatten.uniq
end

def downloadable_versions
  downloadable_version_strings.map do |downloadable_version_string|
    Version.new(downloadable_version_string)
  end
end

def required_version
  @required_version ||= (
    matching_versions = downloadable_versions.select do |downloadable_version|
      [current_version.major, current_version.minor, current_version.tiny] === [downloadable_version.major, downloadable_version.minor, downloadable_version.tiny]
    end
    Version.latest(matching_versions.flatten)
  )
end

def download_url
  @download_url ||= (
    if RUBY_PLATFORM == 'arm64-darwin22'
      "https://chromedriver.storage.googleapis.com/#{required_version}/chromedriver_mac_arm64.zip"
    else
      "https://chromedriver.storage.googleapis.com/#{required_version}/chromedriver_mac64.zip"
    end
  )
end

def download_directory
  "#{home_directory}/Downloads"
end

def download_file_path
  @download_file_path ||= (
    if RUBY_PLATFORM == 'arm64-darwin22'
      File.join(download_directory, 'chromedriver_mac_arm64.zip')
    else
      File.join(download_directory, 'chromedriver_mac64.zip')
    end
  )
end

def download_chromedriver
  open(download_file_path, 'wb') do |file|
    file << URI.open(download_url).read
  end
end

def unzip_chromedriver
  Zip::File.open(download_file_path) do |zip_file|
    zip_file.each do |zip_entry|
      zip_file.extract(zip_entry, "#{download_directory}/chromedriver") unless File.exist?("#{download_directory}/#{zip_entry.name}")
    end
  end
end

def remove_old_chromedriver
  FileUtils.rm("#{home_directory}/bin/chromedriver")
end

def move_chromedriver_to_bin_dir
  FileUtils.mv("#{home_directory}/Downloads/chromedriver", "#{home_directory}/bin/chromedriver")
end

def make_chromedriver_executable
  FileUtils.chmod('+x', "#{home_directory}/bin/chromedriver")
end

def remove_zip_file
  if RUBY_PLATFORM == 'arm64-darwin22'
    FileUtils.rm(File.join(download_directory, 'chromedriver_mac_arm64.zip'))
  else
    FileUtils.rm(File.join(download_directory, 'chromedriver_mac64.zip'))
  end
end

def main
  puts "Downloading chromedriver version #{required_version.version_string}..."
  download_chromedriver
  unzip_chromedriver
  remove_old_chromedriver if File.exist?("#{home_directory}/bin/chromedriver")
  move_chromedriver_to_bin_dir
  make_chromedriver_executable
  remove_zip_file
  puts "Finished!"
end

main
